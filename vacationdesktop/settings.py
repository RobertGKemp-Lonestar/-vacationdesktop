"""
Django settings for vacationdesktop project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from decouple import config
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-build-key-only-for-railway-build-phase')

# Safety check - ensure we're not using build key in production
if not DEBUG and 'build-key-only' in SECRET_KEY:
    raise Exception("Production SECRET_KEY not set! Using build fallback key is not secure.")

# ALLOWED_HOSTS configuration
ALLOWED_HOSTS_ENV = config('ALLOWED_HOSTS', default='127.0.0.1,localhost,192.168.86.26,web-production-c5d67.up.railway.app')
ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_ENV.split(',') if host.strip()]

# Add Railway domain if not in production DEBUG mode
if not DEBUG:
    railway_domain = config('RAILWAY_STATIC_URL', default='').replace('https://', '').replace('http://', '')
    if railway_domain and railway_domain not in ALLOWED_HOSTS:
        ALLOWED_HOSTS.append(railway_domain)

# Site domain for absolute URLs in emails
SITE_DOMAIN = config('SITE_DOMAIN', default='web-production-c5d67.up.railway.app' if not DEBUG else 'localhost:8000')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_otp',
    'django_otp.plugins.otp_totp',
    'django_otp.plugins.otp_static',
    'rbac',
    'business_management',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Static file serving
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'rbac.middleware.ImpersonationTokenMiddleware',  # Token-based impersonation
    'django_otp.middleware.OTPMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'vacationdesktop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'vacationdesktop.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Railway database connection - prioritize public URL
DATABASE_PUBLIC_URL = config('DATABASE_PUBLIC_URL', default=None)
DATABASE_URL = config('DATABASE_URL', default=None)

if DATABASE_PUBLIC_URL:
    # Production: Use Railway's public database URL
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_PUBLIC_URL)
    }
elif DATABASE_URL and 'railway.internal' not in DATABASE_URL and 'RAILWAY_PRIVATE_DOMAIN' not in DATABASE_URL:
    # Fallback: Use DATABASE_URL if it doesn't contain private domains
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL)
    }
else:
    # Development or final fallback: Use individual PostgreSQL settings
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': config('DB_NAME', default='vacationdesktop'),
            'USER': config('DB_USER', default='postgres'),
            'PASSWORD': config('DB_PASSWORD', default=''),
            'HOST': config('DB_HOST', default='localhost'),
            'PORT': config('DB_PORT', default='5432'),
        }
    }

# SQLite backup (commented out)
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom user model
AUTH_USER_MODEL = 'rbac.User'

# Static files
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Ensure media directories exist on startup
import os
os.makedirs(MEDIA_ROOT, exist_ok=True)
os.makedirs(os.path.join(MEDIA_ROOT, 'tenant_logos'), exist_ok=True)

# Authentication settings
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'dashboard'  # Main RBAC dashboard
LOGOUT_REDIRECT_URL = 'login'

# Email settings for password reset and notifications
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')

# TEMPORARY: Force console backend to prevent worker timeouts until SMTP is fixed
FORCE_CONSOLE_EMAIL = config('FORCE_CONSOLE_EMAIL', default='true', cast=bool)

# Debug environment variable loading
print(f"ðŸ“§ DEBUG: EMAIL_HOST_USER from env: '{EMAIL_HOST_USER}'")
print(f"ðŸ“§ DEBUG: EMAIL_HOST_PASSWORD exists: {bool(EMAIL_HOST_PASSWORD)}")
print(f"ðŸ“§ DEBUG: FORCE_CONSOLE_EMAIL: {FORCE_CONSOLE_EMAIL}")

# Check if we should use Mailgun API instead of SMTP
USE_MAILGUN_API = config('USE_MAILGUN_API', default='false', cast=bool)
MAILGUN_API_KEY = config('MAILGUN_API_KEY', default='')

# Use SMTP or API if credentials are provided AND force console is disabled
if EMAIL_HOST_USER and EMAIL_HOST_PASSWORD and not FORCE_CONSOLE_EMAIL:
    
    # Check if we should use Mailgun API (more reliable on cloud platforms)
    if USE_MAILGUN_API and MAILGUN_API_KEY and 'mailgun' in config('EMAIL_HOST', default='').lower():
        EMAIL_BACKEND = 'mailgun_api_backend.MailgunAPIBackend'
        MAILGUN_DOMAIN = config('MAILGUN_DOMAIN', default='')
        # Extract domain from email user if not explicitly set
        if not MAILGUN_DOMAIN and '@' in EMAIL_HOST_USER:
            MAILGUN_DOMAIN = EMAIL_HOST_USER.split('@')[1]
        print("ðŸ“§ Email backend: Mailgun API (HTTP)")
        print(f"ðŸ“§ Mailgun domain: {MAILGUN_DOMAIN}")
    else:
        # Production: Use SMTP when credentials are configured
        EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
        EMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')
        EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
        EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
        EMAIL_USE_SSL = config('EMAIL_USE_SSL', default=False, cast=bool)
    
    # Only configure SMTP settings if we're using SMTP backend
    if EMAIL_BACKEND == 'django.core.mail.backends.smtp.EmailBackend':
        print(f"ðŸ“§ DEBUG: Configured EMAIL_HOST: {EMAIL_HOST}")
        print(f"ðŸ“§ DEBUG: Configured EMAIL_PORT: {EMAIL_PORT}")
        print(f"ðŸ“§ DEBUG: Configured EMAIL_USE_TLS: {EMAIL_USE_TLS}")
        
        # Special handling for Mailgun - always use optimal settings
        if 'mailgun' in EMAIL_HOST.lower():
            # Mailgun works best with port 587 and TLS, not SSL
            original_port = EMAIL_PORT
            original_tls = EMAIL_USE_TLS
            original_ssl = EMAIL_USE_SSL
            
            EMAIL_PORT = 587
            EMAIL_USE_TLS = True
            EMAIL_USE_SSL = False
            
            print(f"ðŸ“§ Mailgun detected: Optimized settings")
            print(f"ðŸ“§   Changed port from {original_port} to {EMAIL_PORT}")
            print(f"ðŸ“§   Changed TLS from {original_tls} to {EMAIL_USE_TLS}")
            print(f"ðŸ“§   Changed SSL from {original_ssl} to {EMAIL_USE_SSL}")
        else:
            print(f"ðŸ“§ Non-Mailgun SMTP: Using port {EMAIL_PORT}")
        
        print("ðŸ“§ Email backend: SMTP configured")
    
    DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@vacationdesktop.com')
else:
    # Development/No credentials/Force console: Print emails to console for debugging
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@vacationdesktop.com')
    if FORCE_CONSOLE_EMAIL:
        print("ðŸ“§ Email backend: Console (FORCE_CONSOLE_EMAIL=true - preventing timeouts)")
    else:
        print("ðŸ“§ Email backend: Console (SMTP credentials not configured)")

# Redis Configuration (Production-like caching and sessions) 
REDIS_URL = config('REDIS_URL', default='')

# Cache Configuration - Use Redis if available, fallback to database
if REDIS_URL:
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': REDIS_URL,
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            },
            'KEY_PREFIX': 'vacationdesktop',
            'TIMEOUT': 300,  # 5 minutes default
        }
    }
    # Use Redis for sessions when available
    SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
    SESSION_CACHE_ALIAS = 'default'
else:
    # Fallback to database-based cache and sessions for Railway
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
            'LOCATION': 'django_cache_table',
        }
    }
    # Use database sessions when Redis is not available
    SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 86400  # 24 hours
SESSION_COOKIE_SECURE = not DEBUG  # HTTPS only in production
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'

# Security Settings (Production-grade)
if not DEBUG:
    # HTTPS/SSL Settings
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    
    # Security Headers
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
    # Cookie Security
    CSRF_COOKIE_SECURE = True
    CSRF_COOKIE_HTTPONLY = True

# Static Files with WhiteNoise (Production-like)
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Logging Configuration (Production-ready)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console', 'file'] if DEBUG else ['file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'] if DEBUG else ['file'],
            'level': 'INFO',
            'propagate': False,
        },
        'rbac': {
            'handlers': ['console', 'file'] if DEBUG else ['file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
    },
}
